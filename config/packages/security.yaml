security:
  enable_authenticator_manager: true
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
    App\Entity\User:
      algorithm: auto

  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
    main:
      # custom_authenticators:
      #     - App\Security\ApiKeyAuthenticator
      lazy: true
      provider: app_user_provider
      form_login:
        # "login" is the name of the route created previously
        login_path: login
        check_path: login
        enable_csrf: false
        # failure_path: login_failure_route_name
        # use_forward: true
      json_login:
        # api_login is a route we will create below
        check_path: api_login
      logout:
        path: app_logout
      # access_denied_handler: App\Security\AccessDeniedHandler
      entry_point: App\Security\AuthenticationEntryPoint

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#the-firewall

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    # - { path: ^/employer, roles: ROLE_EMPLOYER }
    - { path: ^/admin, roles: ROLE_ADMIN }
    # - { path: ^/check_auth, roles: ROLE_USER }
    # - { path: ^/profile, roles: ROLE_USER }
